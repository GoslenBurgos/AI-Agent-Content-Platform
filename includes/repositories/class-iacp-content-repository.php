<?php

class IACP_Content_Repository {

    private $db;

    public function __construct(wpdb $db) {
        $this->db = $db;
    }

    public function save_content( $title, $theme, $content, $virality_score, $status ) {
        $table_name = $this->db->prefix . 'iacp_content';

        $this->db->insert(
            $table_name,
            [
                'title' => $title,
                'theme' => $theme,
                'content' => $content,
                'virality_score' => $virality_score,
                'status' => $status,
            ]
        );
        return $this->db->insert_id;
    }

    public function get_all_content() {
        $table_name = $this->db->prefix . 'iacp_content';
        return $this->db->get_results( "SELECT * FROM $table_name" );
    }

    public function get_content( $content_id ) {
        $table_name = $this->db->prefix . 'iacp_content';
        return $this->db->get_row( $this->db->prepare( "SELECT * FROM $table_name WHERE id = %d", $content_id ) );
    }

    public function update_content_status( $content_id, $status ) {
        $table_name = $this->db->prefix . 'iacp_content';
        $this->db->update(
            $table_name,
            [ 'status' => $status ],
            [ 'id' => $content_id ],
            [ '%s' ], [ '%d' ]
        );
    }

    public function delete_content( $content_id ) {
        $table_name = $this->db->prefix . 'iacp_content';
        $versions_table_name = $this->db->prefix . 'iacp_content_versions';
        $this->db->delete( $versions_table_name, [ 'content_id' => $content_id ], [ '%d' ] );
        return $this->db->delete( $table_name, [ 'id' => $content_id ], [ '%d' ] );
    }

    public function save_content_version( $content_id, $content, $agent_id = 0, $note = '', callable $agent_retriever = null ) {
        $table_name = $this->db->prefix . 'iacp_content_versions';

        $version_note = $note;
        if ( empty($version_note) && !empty($agent_id) ) {
            if ($agent_retriever === null) {
                $agent_retriever = ['IACP_Agents', 'get_agent'];
            }
            $agent = call_user_func($agent_retriever, $agent_id);
            $version_note = $agent ? sprintf('Generated by agent: %s', $agent->name) : 'Initial generation';
        } elseif (empty($version_note)) {
            $version_note = 'Initial version';
        }

        $this->db->insert(
            $table_name,
            [
                'content_id'   => $content_id,
                'content'      => $content,
                'version_note' => $version_note,
                'created_at'   => current_time( 'mysql' ),
                'created_by'   => get_current_user_id(),
            ]
        );
    }

    public function get_content_versions( $content_id ) {
        $table_name = $this->db->prefix . 'iacp_content_versions';
        return $this->db->get_results( $this->db->prepare( "SELECT * FROM $table_name WHERE content_id = %d ORDER BY created_at DESC", $content_id ) );
    }

    public function restore_content_version( $version_id, callable $agent_retriever = null ) {
        $versions_table = $this->db->prefix . 'iacp_content_versions';
        $content_table = $this->db->prefix . 'iacp_content';

        $version_data = $this->db->get_row( $this->db->prepare( "SELECT * FROM $versions_table WHERE id = %d", $version_id ) );
        if ( ! $version_data ) {
            return new WP_Error( 'version_not_found', 'Content version not found.' );
        }

        $this->db->update(
            $content_table,
            [ 'content' => $version_data->content ],
            [ 'id' => $version_data->content_id ],
            [ '%s' ], [ '%d' ]
        );
        $this->save_content_version( $version_data->content_id, $version_data->content, 0, sprintf( 'Restored from version created at %s', $version_data->created_at ), $agent_retriever );
        return true;
    }

    public function publish_content_as_post( $content_id, $publish_date_str = null ) {
        IACP_Logger::log('debug', '--- INICIANDO DEPURACIÓN DE PUBLICACIÓN PROGRAMADA ---');
        IACP_Logger::log('debug', '[PASO 1] Valor crudo de `publish_date_str` recibido: ' . var_export($publish_date_str, true));

        $content_data = $this->get_content( $content_id );

        if ( ! $content_data ) {
            IACP_Logger::log('error', 'No se encontró contenido para el ID: ' . $content_id);
            return new WP_Error( 'content_not_found', 'Contenido no encontrado para publicar como post.' );
        }

        if ( empty( $publish_date_str ) ) {
            $post_status = 'publish';
            $post_date_gmt = current_time('mysql', 1);
            $post_date = current_time('mysql');
            IACP_Logger::log('debug', '[CASO] No se proporcionó fecha. Publicando inmediatamente.', ['status' => $post_status, 'date_gmt' => $post_date_gmt]);
        } else {
            $local_date_str = str_replace('T', ' ', $publish_date_str) . ':00';
            IACP_Logger::log('debug', '[PASO 2] String de fecha local formateado: ' . $local_date_str);

            $gmt_date_str = get_gmt_from_date($local_date_str);
            IACP_Logger::log('debug', '[PASO 3] String de fecha convertido a GMT: ' . $gmt_date_str);

            $local_date_for_post = get_date_from_gmt($gmt_date_str);
            IACP_Logger::log('debug', '[PASO 4] Fecha GMT convertida de nuevo a local para `post_date`: ' . $local_date_for_post);

            $gmt_timestamp_to_publish = strtotime($gmt_date_str);
            $current_gmt_timestamp = current_time('timestamp', 1);
            IACP_Logger::log('debug', '[PASO 5] Comparando Timestamps GMT', [
                'timestamp_para_publicar' => $gmt_timestamp_to_publish,
                'timestamp_actual_gmt'    => $current_gmt_timestamp,
                'diferencia_segundos'     => $gmt_timestamp_to_publish - $current_gmt_timestamp
            ]);

            if ( $gmt_timestamp_to_publish > $current_gmt_timestamp ) {
                $post_status = 'future';
            } else {
                $post_status = 'publish';
            }
            
            IACP_Logger::log('debug', '[PASO 6] Estado de post determinado: ' . $post_status);
            
            $post_date = $local_date_for_post;
            $post_date_gmt = $gmt_date_str;
        }

        $new_post = [
            'post_title'    => $content_data->title,
            'post_content'  => $content_data->content,
            'post_status'   => $post_status,
            'post_type'     => 'post',
            'post_author'   => get_current_user_id(),
            'post_date'     => $post_date,
            'post_date_gmt' => $post_date_gmt,
        ];
        IACP_Logger::log('debug', '[PASO 7] Datos finales para `wp_insert_post`:', $new_post);

        $post_id = wp_insert_post( $new_post, true );

        if ( is_wp_error( $post_id ) ) {
            IACP_Logger::log('error', '`wp_insert_post` falló.', $post_id->get_error_messages());
            return $post_id;
        }

        IACP_Logger::log('info', 'Post insertado/programado con éxito. ID: ' . $post_id);

        $table_name = $this->db->prefix . 'iacp_content';
        $this->db->update(
            $table_name,
            [ 'post_id' => $post_id ],
            [ 'id' => $content_id ],
            [ '%d' ], [ '%d' ]
        );

        IACP_Logger::log('debug', '--- FINALIZANDO DEPURACIÓN DE PUBLICACIÓN PROGRAMADA ---');
        return $post_id;
    }

    public function track_post_view( $content ) {
        global $post;

        if ( is_singular( 'post' ) && in_the_loop() && is_main_query() && is_object( $post ) ) {
            $table_name = $this->db->prefix . 'iacp_content';

            $content_id = $this->db->get_var( $this->db->prepare(
                "SELECT id FROM $table_name WHERE post_id = %d",
                $post->ID
            ) );

            if ( $content_id ) {
                $cookie_name = 'iacp_viewed_post_' . $content_id;
                if ( ! isset( $_COOKIE[ $cookie_name ] ) ) {
                    $this->db->query( $this->db->prepare(
                        "UPDATE $table_name SET views = views + 1 WHERE id = %d",
                        $content_id
                    ) );
                    setcookie( $cookie_name, '1', time() + DAY_IN_SECONDS, COOKIEPATH, COOKIE_DOMAIN );
                }
            }
        }

        return $content;
    }
}
